#!/usr/bin/python

import string, sys, getopt, os, ConfigParser

HOME = os.path.expanduser("~")
PATH = HOME + "/.sire/"
CONFIG = PATH + "/sirerc"
DB = PATH + "/siredb"

NAME = "sire"
VERSION = "0.1.1"
AUTHORS = "Oscar Eriksson"
EMAIL = "(oscar.eriks@gmail.com)"
LICENCE = '''License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.'''

C = { 
    'default' : "\033[0m",
    'bold'    : "\033[1m",
    'red'     : "\033[31m",
    'green'   : "\033[32m",
    'yellow'  : "\033[33m",
    'blue'    : "\033[34m",
    'magenta' : "\033[35m",
    'cyan'    : "\033[36m",
}

# Define arguemnts.
opts, args = getopt.getopt(
    sys.argv[1:],                                    # Arguements from commandline.
    'lhva:d:c:',                                       # Short arguments.
    ['list', 'add=', 'change=', 'delete=', 'help', 'version']   # Long arguments.
)

def usage():
    print '''Usage: [OPTIONS] [ARGUEMTNS]
    --list, -l          if no argument is given, items of status 'not seem' will be printed
    --add, -a           takes two arguments, first is the catagory, second is the title
    --delete, -d        takes one argument, which is the ID of the item
    --change, -c        takes two arguments, first is ID of the item and second is what catagory to change to
    --help, -h          prints this message
    --version, -v       prints version, author, email, licence

Examples:
    # add to the default catagory:
    sire -a "rule the earth"
    sire -a eat
    sire -a sleep

    # add to catagory 3:
    sire -a "build a bunker" 3
    sire -a profit 3

    # add to catagory "life goals":
    sire -a "world domination" "life goals"

    # list all items in all catagories
    sire -l all

    # list all items in catagory "life goals"
    sire -l "life goals"

    # list all items in the default catagory (changed in sirerc)
    sire
    sire -l

    # delete item with ID '39'
    sire -d 39

Files:
    Configuration:
    ~/.sire/sirerc

    Database:
    ~/.sire/siredb
'''

# Prints version number, licence and authors with email.
def version():
    print NAME,VERSION,'\n',LICENCE,'\n\nWritten by: ',AUTHORS,EMAIL

def parseconfig(conffile):
    _config = {}
    cp = ConfigParser.ConfigParser()
    cp.read(conffile)
    for sec in cp.sections():
        name = string.lower(sec)
        for opt in cp.options(sec):
            _config[name + "." + string.lower(opt)] = string.strip(cp.get(sec, opt))
    return _config

# Print a catagory (status) description using bold and colors.
def printcatagory(catagory, config):
    print C["bold"], C[config["colors." + catagory]], config["catagories." + catagory], C["default"]

# Read the database.
# FIXME: I don't want to load a 500MB file each time I wan't to check what I can watch.
def parsedb(dbfile):
    db = {}
    id = 0
    f = file(dbfile, 'r')
    for line in f.readlines():
        parts = line.split(":", 2)
        parts[2] = parts[2][:-1]

        if not db.has_key(parts[0]):
            db[parts[0]] = {parts[1] : parts[2]}

        else:
            db[parts[0]][parts[1]] = parts[2]

        id += 1

    f.close()
    return db

# List either all catagories or only the default catagory.
def list(db, config, catagory):
    # Nothing in database.
    if db == {}:
        print "Empty."
        sys.exit()

    if catagory == "all":
        for d in db:
            printcatagory(d, config)
            for id, name in db[d].iteritems():
                print C["bold"] + id + C["default"], ':', name

            # For newline separator between items of different statuses.
            print
        
    else:
        # Default catagory is 'not seen'.
        if catagory is None:
            catagory = config["catagories.defcat-list"]

        if catagory not in db.keys():
            print "Empty."
            sys.exit()

        # Print the catagory title.
        printcatagory(catagory, config)

        # Sort by specified method.
        sortmethod = config["sort." + catagory]
        if   sortmethod == "title" : db = sorted(db[catagory].items(), key=lambda (k,v): (v,k))
        elif sortmethod == "id"    : db = sorted(db[catagory].items(), key=lambda (k,v): (k,v))
        else                       : db = db[catagory].items()

        for id, title in db:
            print C["bold"] + id + C["default"], ':', title

# Add an item to the database.
def add(db, config, name, catagory):
    if ("catagories." + catagory) not in config.keys():
        print "Specified catagory does not exist."
        sys.exit(1)

    l = []
    for k, v in db.iteritems():
        l += v.keys()

    id = "0"
    for i in l:
        if int(i) > int(id):
            id = str(i)

    id = str(int(id) + 1)

    f = open(DB, 'a')
    f.write(catagory + ":" + id + ":" + name + '\n')
    f.close()

    print "Saved '" + name + "' with id '" + id + "'."

# Delete an item from the database.
def delete(db, id):
    for d in db:
        if db[d].has_key(id):
            del db[d][id]

    savedb(db)
    print "Deleted item with ID '" + id + "'."

# Save a changed database.
def savedb(db):
    f = open(DB, 'w')
    for d in db:
        for id in db[d]:
            f.write(d + ":" + id + ":" + db[d][id] + "\n")

    f.close()

# Change the status of an item with ID 'id'.
def change(db, id, status):
    print "changing"

# Handle command line arguments.
def main():
    # Check if config and database files exists and are read- and writeable.
    if not os.path.exists(DB) or not os.path.exists(CONFIG):
        print "Database and/or config file not found. Should be in ~/.sire/!"
        sys.exit(1)

    # First read the database from the file.
    db = parsedb(DB)

    # Read the config file.
    config = parseconfig(CONFIG)

    # If no argument given, list items of default catagory.
    if len(sys.argv) == 1:
        list(db, config, None)
        sys.exit()

    # What to do with the different arguments.
    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit()

        elif o in ("-l", "--list"):
            if len(sys.argv) == 2:
                # Use default catagory first.
                catagory = config["catagories.defcat-list"]
                list(db, config, catagory)
                sys.exit()

            catagory = sys.argv[2]
            if catagory == "all" or ("catagories." + catagory) in config.keys() or catagory is None:
                list(db, config, catagory)
                sys.exit()

            else:
                usage()
                sys.exit(1)

        elif o in ("-a", "--add"):
            if len(sys.argv) < 3:
                usage()
                sys.exit(1)

            # Use default catagory first.
            catagory = config["catagories.defcat-add"]

            if len(sys.argv) == 4:
                catagory = sys.argv[3]

            title = sys.argv[2]
            add(db, config, title, catagory)

        elif o in ("-d", "--delete"):
            if len(sys.argv) < 3:
                usage()
                sys.exit(1)
    
            id = sys.argv[2]
            delete(db, id)

        elif o in ("-c", "--change"):
            if len(sys.argv) < 4:
                usage()
                sys.exit(1)
    
            id = sys.agrv[2]
            catagory = sys.argv[3]
            change(db, id, catagory)

        elif o in ("-v", "--version"):
            version()
            exit()

        else:
            usage()
            exit(1)

# Call main().
if __name__ == "__main__":
    main()
    sys.exit()
